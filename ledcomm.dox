/*
 * Copyright (c) 2013, 2014 Kevin L. Pauba
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
 * OF SUCH DAMAGE.
 *
 * This file is part of the LEDComm Driver for ChibiOS/RT.
 * 
 * Author: Kevin L. Pauba <klpauba@gmail.com>
 *
 */
/**
 * @mainpage LEDComm
 * @author Kevin L. Pauba (klpauba@gmail.com).
 * @version 1.0.0
 *
 * <h2>Introduction</h2>
 *
 * LEDComm is a library that allows you to use a single LED for slow
 * (around 30 baud), very short range wireless (less than an inch),
 * bidirectional asynchronous serial communications.  The signalling
 * allows for half-duplex operation, 7- or 8-bits per character
 * (transferred in big-endian order) and optional odd, even, mark or
 * space parity.  A description of its operation is provided at
 * http://mecrisp.sourceforge.net/ledcomm.htm.
 *
 * This code has only been tested with ChibiOS/RT V2.6.x (stable) on @p ST_NUCLEO_L152RE and
 * @p ST_NUCLEO_F401RE boards but should work on any STM32 board without
 * modification (using ChibiOS, of course). With the appropriate
 * setting of an EXT configuration, it should work on any platform
 * supported by ChibiOS.
 *
 * LEDComm was developed as part of a project to collect data from <a
 * href="http://en.wikipedia.org/wiki/Honey_bee">honey bee</a> hives.
 * I wanted an effective (and cheap) way to exchange data between the
 * hive boxes that didn't involve wires.  Just as Giovanni Di Sirio
 * has shared ChibiOS with the community, I offer this small
 * contribution in return.
 *
 * <h2>Using the LEDComm Library</h2>
 *
 * The <TT>LEDComm</TT> library depends on a few HAL modules so the
 * following manifest constants in @p halconf.h must be set to @p TRUE:
 *
 * @li HAL_USE_PAL
 * @li HAL_USE_EXT
 * @li HAL_USE_GPT
 *
 * Additionally, the <TT>LEDComm</TT> library depends on a few ChibiOS modules so the
 * following manifest constants in @p chconf.h must be set to @p TRUE:
 * 
 * @li CH_USE_QUEUES
 * @li CH_USE_EVENTS
 *
 * In order to use the LEDComm driver the source code must be
 * extracted in the <TT>@$(CHIBIOS)/ext</TT> directory. Your project @p
 * Makefile must be modified by adding
 * <TT>@$(CHIBIOS)/ext/ledcomm<I>-X.Y.Z</I>/ledcomm.c</TT> to the @p
 * CSRC variable and @p <TT>@$(CHIBIOS)/ext/ledcomm<I>-X.Y.Z</I></TT>
 * to the @p INCDIR variable.
 *
 * You must then copy the
 * <TT>@$(CHIBIOS)/ext/ledcomm<I>-X.Y.Z</I>/templates/ledcommconf.h</TT>
 * configuration header to your project directory and modify the
 * hardware configuration as desired.
 *
 * Some example applications are provided in the
 * <TT>@$(CHIBIOS)/ext/ledcomm<I>-X.Y.Z</I>/examples/</TT> directory.
 */


/**
 * @defgroup LEDComm LEDComm Driver
 * @brief   Generic (but slow) Serial Driver using an LED instead of TX and RX wires.
 * @details This module implements a generic half duplex serial driver
 *          that uses an LED instead of TX and RX wires. The
 *          driver implements a @p SerialDriver interface and uses I/O Queues
 *          for communication. Event
 *          flags are used to notify the application about incoming data,
 *          outgoing data and other I/O events.<br>
 * @pre     In order to use the LEDComm driver the source code must
 *          be extracted in the <TT>@$(CHIBIOS)/ext</TT> directory. The project
 *          @p Makefile must be modified by adding <TT>@$(CHIBIOS)/ext/ledcomm<I>-X.Y.Z</I>/ledcomm.c</TT>
 *          to the @p CSRC variable and @p <TT>@$(CHIBIOS)/ext/ledcomm<I>-X.Y.Z</I></TT>
 *          to the @p INCDIR variable.
 *
 *
 * @section ledcomm_1 Driver State Machine
 * The driver implements a state machine internally, not all the driver
 * functionalities can be used in any moment, any transition not explicitly
 * shown in the following diagram has to be considered an error and shall
 * be captured by an assertion (if enabled).
 * @dot
  digraph example {
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true",
          width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    uninit [label="LD_UNINIT", style="bold"];
    stop [label="LD_STOP\nLow Power"];
    ready [label="LD_READY\nClock Enabled"];

    uninit -> stop [label=" ldInit()"];
    stop -> stop [label="\nldStop()"];
    stop -> ready [label="\nldStart()"];
    ready -> stop [label="\nldStop()"];
    ready -> ready [label="\nldStart()"];
    ready -> ready [label="\nAny I/O operation"];
  }
 * @enddot
 *
 * @ingroup IO
 */
